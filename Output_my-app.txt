// ..\my-app\src\api\api.js
export const fetchHistoricalData = async (pair, timeFrame) => {
  return [
    { time: "2023-10-01", open: 1.1, high: 1.2, low: 1.0, close: 1.15 },
    { time: "2023-10-02", open: 1.15, high: 1.25, low: 1.1, close: 1.2 },
  ];
};



// ..\my-app\src\App.js
import React from 'react';
import { ForexProvider } from './contexts/ForexContext';
import Header from './component/Header';
import CurrencyPairSelector from './component/CurrencyPairSelector';
import TimeFrameSelector from './component/TimeFrameSelector';
import ForexGraph from './component/ForexGraph';

function App() {
  return (
    <ForexProvider>
      <Header />
      <div className="flex justify-center">
        <CurrencyPairSelector />
        <TimeFrameSelector />
      </div>
      <ForexGraph />
    </ForexProvider>
  );
}

export default App;


// ..\my-app\src\App.test.js
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});



// ..\my-app\src\component\CurrencyPairSelector.js
import React from "react";
import { useContext } from "react";
import { ForexContext } from "../contexts/ForexContext";

const currencyPairs = ["EURUSD", "GBPUSD", "USDJPY", "AUDUSD"];

const CurrencyPairSelector = () => {
  const { selectedPair, setSelectedPair } = useContext(ForexContext);

  return (
    <select
      value={selectedPair}
      onChange={(e) => setSelectedPair(e.target.value)}
      className="m-4"
    >
      {currencyPairs.map((pair) => (
        <option key={pair} value={pair}>
          {pair}
        </option>
      ))}
    </select>
  );
};

export default CurrencyPairSelector;



// ..\my-app\src\component\ForexGraph.js
import React, { useContext } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
} from "recharts";
import { ForexContext } from "../contexts/ForexContext";

const ForexGraph = () => {
  const { data, loading, error } = useContext(ForexContext);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;

  return (
    <LineChart width={800} height={400} data={data}>
      <CartesianGrid strokeDasharray="3 3" />
      <XAxis dataKey="time" />
      <YAxis />
      <Tooltip />
      <Legend />
      <Line type="monotone" dataKey="close" stroke="#8884d8" />
      <Line type="monotone" dataKey="macd" stroke="#ff7300" />
      {/* Optionally add lines for signal and histogram */}
    </LineChart>
  );
};

export default ForexGraph;



// ..\my-app\src\component\Header.js
import React from 'react';

const Header = () => {
  return (
    <header className="bg-gray-800 text-white p-4">
      <h1>Forex Prediction App</h1>
    </header>
  );
};

export default Header;


// ..\my-app\src\component\TimeFrameSelector.js
import React from 'react';
import { useContext } from 'react';
import { ForexContext } from '../contexts/ForexContext';

const timeFrames = ['5min', '10min', '30min', '1h', '24h'];

const TimeFrameSelector = () => {
  const { selectedTimeFrame, setSelectedTimeFrame } = useContext(ForexContext);

  return (
    <select
      value={selectedTimeFrame}
      onChange={e => setSelectedTimeFrame(e.target.value)}
      style={{ margin: '1rem' }}
    >
      {timeFrames.map(tf => (
        <option key={tf} value={tf}>{tf}</option>
      ))}
    </select>
  );
};

export default TimeFrameSelector;


// ..\my-app\src\contexts\ForexContext.js
import React, { createContext, useState, useEffect } from 'react';
import axios from 'axios';
import { MACD } from 'technicalindicators';

export const ForexContext = createContext();

export const ForexProvider = ({ children }) => {
  const [selectedPair, setSelectedPair] = useState('EURUSD');
  const [selectedTimeFrame, setSelectedTimeFrame] = useState('5min');
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchHistoricalData(selectedPair, selectedTimeFrame);
  }, [selectedPair, selectedTimeFrame]);

  const fetchHistoricalData = async (pair, timeFrame) => {
    setLoading(true);
    setError(null);
    try {
      // Fetch historical data from backend API
      const response = await axios.get('/api/historical', {
        params: { pair, timeFrame }
      });
      const historicalData = response.data;

      // Calculate technical indicators
      const closeValues = historicalData.map(d => d.close);

      // Calculate MACD
      const macdResult = MACD({
        values: closeValues,
        shortPeriod: 12,
        longPeriod: 26,
        signalPeriod: 9,
      });

      const macdValues = macdResult.macd;
      const signalValues = macdResult.signal;
      const histogramValues = macdResult.histogram;

      // Ensure data lengths match
      const macdLength = macdValues.length;
      const slicedData = historicalData.slice(-macdLength);

      // Add MACD values to data points
      slicedData.forEach((dataPoint, index) => {
        dataPoint.macd = macdValues[index];
        dataPoint.signal = signalValues[index];
        dataPoint.histogram = histogramValues[index];
      });

      // Update state with data and indicators
      setData(slicedData);
    } catch (err) {
      setError(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <ForexContext.Provider
      value={{
        selectedPair,
        setSelectedPair,
        selectedTimeFrame,
        setSelectedTimeFrame,
        data,
        loading,
        error,
      }}
    >
      {children}
    </ForexContext.Provider>
  );
};


// ..\my-app\src\index.js
import React from "react";
import ReactDOM from "react-dom/client";
import "./tailwind.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

reportWebVitals();



// ..\my-app\src\reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;



// ..\my-app\src\setupTests.js
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';



// ..\my-app\tailwind.config.js
module.exports = {
  content: [
    './src/**/*.{js,jsx,ts,tsx}',
  ],
  theme: {
    // ...
  },
  plugins: [],
}

// File Tree:
├── public
├── src
|   ├── api
|   |   └── api.js
|   ├── App.js
|   ├── App.test.js
|   ├── component
|   |   ├── CurrencyPairSelector.js
|   |   ├── ForexGraph.js
|   |   ├── Header.js
|   |   └── TimeFrameSelector.js
|   ├── contexts
|   |   └── ForexContext.js
|   ├── index.js
|   ├── reportWebVitals.js
|   ├── setupTests.js
└── tailwind.config.js
